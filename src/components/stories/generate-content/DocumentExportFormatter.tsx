
import React from 'react';
import { ContentType } from '@/components/stories/ContentDisplay';
import { JiraTicket } from '@/types/jira';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import remarkGfm from 'remark-gfm';

interface DocumentExportFormatterProps {
  content: string;
  contentType: ContentType;
  ticket: JiraTicket;
  userName?: string;
}

const DocumentExportFormatter: React.FC<DocumentExportFormatterProps> = ({
  content,
  contentType,
  ticket,
  userName = 'AI Assistant'
}) => {
  const date = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const documentTitle = 
    contentType === 'lld' ? 'Low-Level Design Document' :
    contentType === 'code' ? 'Implementation Code' :
    contentType === 'tests' ? 'Unit Tests Documentation' :
    contentType === 'testcases' ? 'Test Cases Document' : 
    'Test Scripts Documentation';
  
  const technologiesUsed = 
    contentType === 'code' ? 'Angular (Frontend), NestJS (Backend), PostgreSQL (Database)' :
    contentType === 'tests' ? 'Jest (Backend), Jasmine (Frontend)' :
    contentType === 'testScripts' ? 'Playwright (Functional Testing), JMeter (Performance Testing)' :
    '';

  // CSS styles for printing
  const printStyles = `
    @media print {
      .page-break-after {
        page-break-after: always;
      }
      
      .export-document {
        font-size: 12pt;
      }
      
      .export-document h1 {
        font-size: 24pt;
      }
      
      .export-document h2 {
        font-size: 18pt;
      }
      
      .export-document table {
        width: 100%;
        border-collapse: collapse;
      }
      
      .export-document th, .export-document td {
        border: 1px solid #ddd;
        padding: 8px;
      }
    }
  `;

  return (
    <div className="export-document prose max-w-none p-8 bg-white">
      {/* Add print styles using standard style tag */}
      <style dangerouslySetInnerHTML={{ __html: printStyles }} />
      
      {/* Title Page */}
      <div className="mb-16">
        <div className="text-center mb-24">
          <div className="mb-8">
            <img 
              src="/cardinality-logo.png" 
              alt="Cardinality.ai Logo" 
              className="mx-auto h-16"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.style.display = 'none';
              }}
            />
          </div>
          <h1 className="text-3xl font-bold mb-2">{documentTitle}</h1>
          <p className="text-xl">for</p>
          <p className="text-2xl font-semibold mt-2">{ticket.key}: {ticket.summary}</p>
          
          <div className="mt-16 text-center">
            <p className="text-xl">{new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</p>
            <p className="text-lg mt-2">Version 1.0</p>
          </div>
        </div>
        
        <div className="mt-16">
          <table className="w-full border-collapse">
            <tbody>
              <tr>
                <td className="font-semibold">Generated For:</td>
                <td>{ticket.projectId || 'Project'}</td>
              </tr>
              <tr>
                <td className="font-semibold">Generated By:</td>
                <td>{userName}</td>
              </tr>
              <tr>
                <td className="font-semibold">Generation Date:</td>
                <td>{date}</td>
              </tr>
              <tr>
                <td className="font-semibold">Document Version:</td>
                <td>1.0</td>
              </tr>
              {technologiesUsed && (
                <tr>
                  <td className="font-semibold">Technologies:</td>
                  <td>{technologiesUsed}</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* Table of Contents */}
      <div className="page-break-after">
        <h2 className="text-xl font-bold mb-4">Table of Contents</h2>
        <ol className="list-decimal ml-6 space-y-1">
          <li>Introduction</li>
          <li>Purpose</li>
          <li>Scope</li>
          <li>Related Documents</li>
          <li>Content
            <ol className="list-decimal ml-6 mt-1">
              {contentType === 'lld' && (
                <>
                  <li>Architecture Overview</li>
                  <li>Component Design</li>
                  <li>Data Models</li>
                  <li>API Specifications</li>
                </>
              )}
              {contentType === 'code' && (
                <>
                  <li>Frontend Implementation</li>
                  <li>Backend Implementation</li>
                  <li>Database Schema</li>
                </>
              )}
              {contentType === 'tests' && (
                <>
                  <li>Unit Tests</li>
                  <li>Integration Tests</li>
                </>
              )}
              {contentType === 'testcases' && (
                <>
                  <li>Functional Test Cases</li>
                  <li>Edge Cases</li>
                  <li>Validation Scenarios</li>
                </>
              )}
              {contentType === 'testScripts' && (
                <>
                  <li>Automated Test Scripts</li>
                  <li>Performance Test Configuration</li>
                </>
              )}
            </ol>
          </li>
          <li>Revision History</li>
        </ol>
      </div>
      
      {/* Introduction */}
      <div className="mt-8">
        <h2 className="text-xl font-bold" id="introduction">1. Introduction</h2>
        <p>
          This document contains {documentTitle.toLowerCase()} for the Jira ticket {ticket.key}: {ticket.summary}.
          {contentType === 'lld' && ' It provides a comprehensive technical design to guide the implementation of the required functionality.'}
          {contentType === 'code' && ' It provides implementation code based on the Low-Level Design specifications.'}
          {contentType === 'tests' && ' It provides unit tests for verifying the correctness of the implementation code.'}
          {contentType === 'testcases' && ' It outlines comprehensive test cases for manual testing of the implemented functionality.'}
          {contentType === 'testScripts' && ' It provides automated test scripts for functional testing and performance testing configurations.'}
        </p>
      </div>
      
      {/* Purpose */}
      <div className="mt-6">
        <h2 className="text-xl font-bold" id="purpose">2. Purpose</h2>
        <p>
          {contentType === 'lld' ? 
            'This document provides detailed technical specifications for implementing the required functionality. It serves as a bridge between high-level requirements and actual code implementation.' :
            contentType === 'code' ? 
            'This document provides implementation code based on the Low-Level Design. It showcases how the design specifications are realized in Angular (frontend) and NestJS (backend) with PostgreSQL database.' :
            contentType === 'tests' ? 
            'This document provides unit tests for verifying the implementation code. It uses Jest for backend testing and Jasmine for frontend testing to ensure code correctness and reliability.' :
            contentType === 'testcases' ? 
            'This document outlines comprehensive test cases for manual testing. It covers various scenarios, edge cases, and validation requirements to ensure the functionality meets all requirements.' :
            'This document provides automated test scripts for testing the implementation. It includes Playwright scripts for functional testing and JMeter configurations for performance testing.'}
        </p>
      </div>
      
      {/* Scope */}
      <div className="mt-6">
        <h2 className="text-xl font-bold" id="scope">3. Scope</h2>
        <p>This document covers all aspects related to the {ticket.key} ticket. The scope includes {ticket.summary}.</p>
        {ticket.description && (
          <div className="mt-2">
            <p><strong>Ticket Description:</strong></p>
            <div className="border-l-4 pl-4 border-gray-300 italic text-gray-700">
              {ticket.description.split('\n').map((line, i) => (
                <p key={i}>{line}</p>
              ))}
            </div>
          </div>
        )}
      </div>
      
      {/* Related Documents */}
      <div className="mt-6">
        <h2 className="text-xl font-bold" id="related-documents">4. Related Documents</h2>
        <ul className="list-disc ml-6">
          <li>Jira Ticket: {ticket.key}</li>
          {contentType !== 'lld' && <li>Low-Level Design Document</li>}
          {(contentType === 'tests' || contentType === 'testcases' || contentType === 'testScripts') && <li>Implementation Code Document</li>}
          {contentType === 'testScripts' && <li>Test Cases Document</li>}
        </ul>
      </div>
      
      {/* Main Content */}
      <div className="mt-6">
        <h2 className="text-xl font-bold" id="content">5. Content</h2>
        <div className="mt-4 markdown-content">
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            components={{
              code({className, children, ...props}) {
                const match = /language-(\w+)/.exec(className || '');
                return match ? (
                  <SyntaxHighlighter
                    style={vscDarkPlus}
                    language={match[1]}
                    PreTag="div"
                    {...props}
                  >
                    {String(children).replace(/\n$/, '')}
                  </SyntaxHighlighter>
                ) : (
                  <code className={className} {...props}>
                    {children}
                  </code>
                )
              }
            }}
          >
            {content}
          </ReactMarkdown>
        </div>
      </div>
      
      {/* Revision History */}
      <div className="mt-8">
        <h2 className="text-xl font-bold" id="revision-history">6. Revision History</h2>
        <table className="w-full border-collapse mt-4">
          <thead>
            <tr className="bg-gray-100">
              <th className="border border-gray-300 px-3 py-2">Version</th>
              <th className="border border-gray-300 px-3 py-2">Date</th>
              <th className="border border-gray-300 px-3 py-2">Author</th>
              <th className="border border-gray-300 px-3 py-2">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td className="border border-gray-300 px-3 py-2">1.0</td>
              <td className="border border-gray-300 px-3 py-2">{date}</td>
              <td className="border border-gray-300 px-3 py-2">{userName}</td>
              <td className="border border-gray-300 px-3 py-2">Initial document generation</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DocumentExportFormatter;
